{"version":3,"sources":["fuzzy-search.min.js","Fuzzy-search.js"],"names":["root","factory","define","amd","exports","module","FuzzySearch","this","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","list","arguments","undefined","keys","options","Error","extend","caseSensitive","sort","value","query","results","x","item","score","isMatch","push","keysLoop","y","propertyValues","getDescendantProperty","z","_score","a","b","map","result","_len","objects","Array","_key","object","property","hasOwnProperty","call","toString","path","firstSegment","remaining","dotIndex","index","indexOf","slice","toLocaleLowerCase","indexes","letters","split","letter","_x6"],"mappings":"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","file":"fuzzy-search.min.js","sourcesContent":[";(function(root, factory) {\r\n  /* istanbul ignore next */\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], factory);\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory();\r\n  } else {\r\n    root.FuzzySearch = factory();\r\n  }\r\n}(this, function() {\r\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar FuzzySearch = function () {\n  function FuzzySearch() {\n    var list = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];\n    var keys = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];\n    var options = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];\n\n    _classCallCheck(this, FuzzySearch);\n\n    if (list.length == 0) {\n      throw new Error('We need an array containing the search list');\n    }\n\n    this.list = list;\n    this.keys = keys;\n    this.options = FuzzySearch.extend({\n      caseSensitive: false,\n      sort: false\n    }, options);\n  }\n\n  _createClass(FuzzySearch, [{\n    key: 'search',\n    value: function search() {\n      var query = arguments.length <= 0 || arguments[0] === undefined ? '' : arguments[0];\n\n      var results = [];\n\n      if (query == '') {\n        return this.list;\n      }\n\n      for (var x = 0; x < this.list.length; x++) {\n        var item = this.list[x];\n\n        if (this.keys.length == 0) {\n          var score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n          if (score) {\n            results.push({\n              item: item,\n              score: score\n            });\n          }\n        } else {\n          keysLoop: for (var y = 0; y < this.keys.length; y++) {\n            var propertyValues = FuzzySearch.getDescendantProperty(item, this.keys[y]);\n\n            for (var z = 0; z < propertyValues.length; z++) {\n              var _score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n              if (_score) {\n                results.push({\n                  item: item,\n                  score: _score\n                });\n\n                break keysLoop;\n              }\n            }\n          }\n        }\n      }\n\n      if (this.options.sort) {\n        results.sort(function (a, b) {\n          return a.score - b.score;\n        });\n      }\n\n      return results.map(function (result) {\n        return result.item;\n      });\n    }\n  }], [{\n    key: 'extend',\n    value: function extend() {\n      var target = {};\n\n      for (var _len = arguments.length, objects = Array(_len), _key = 0; _key < _len; _key++) {\n        objects[_key] = arguments[_key];\n      }\n\n      for (var x = 0; x < objects.length; x++) {\n        var object = objects[x];\n\n        for (var property in object) {\n          if (Object.prototype.hasOwnProperty.call(object, property)) {\n            if (Object.prototype.toString.call(object[property]) === '[object Object]') {\n              target[property] = FuzzySearch.extend(target[property], object[property]);\n            } else {\n              target[property] = object[property];\n            }\n          }\n        }\n      }\n\n      return target;\n    }\n  }, {\n    key: 'getDescendantProperty',\n    value: function getDescendantProperty(object, path) {\n      var list = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];\n\n      var firstSegment = void 0;\n      var remaining = void 0;\n      var dotIndex = void 0;\n      var value = void 0;\n      var index = void 0;\n      var length = void 0;\n\n      if (!path) {\n        list.push(object);\n      } else {\n        dotIndex = path.indexOf('.');\n\n        if (dotIndex !== -1) {\n          firstSegment = path.slice(0, dotIndex);\n          remaining = path.slice(dotIndex + 1);\n        } else {\n          firstSegment = path;\n        }\n\n        value = object[firstSegment];\n        if (value !== null && value !== undefined) {\n          if (!remaining && (typeof value === 'string' || typeof value === 'number')) {\n            list.push(value);\n          } else if (Object.prototype.toString.call(value) === '[object Array]') {\n            for (index = 0, length = value.length; index < length; index++) {\n              FuzzySearch.getDescendantProperty(value[index], remaining, list);\n            }\n          } else if (remaining) {\n            FuzzySearch.getDescendantProperty(value, remaining, list);\n          }\n        }\n      }\n\n      return list;\n    }\n  }, {\n    key: 'isMatch',\n    value: function isMatch(item, query, caseSensitive) {\n      if (!caseSensitive) {\n        item = item.toLocaleLowerCase();\n        query = query.toLocaleLowerCase();\n      }\n\n      var index = 0;\n      var indexes = [];\n      var letters = query.split('');\n\n      for (var x = 0; x < letters.length; x++) {\n        var letter = letters[x];\n\n        index = item.indexOf(letter, index);\n\n        if (index == -1) {\n          return false;\n        }\n\n        indexes.push(index);\n\n        index++;\n      }\n\n      var score = 1;\n\n      for (var _x6 = 0; _x6 < indexes.length; _x6++) {\n        if (_x6 != indexes.length - 1) {\n          score += indexes[_x6 + 1] - indexes[_x6];\n        }\n      }\n\n      return score;\n    }\n  }]);\n\n  return FuzzySearch;\n}();\r\nreturn FuzzySearch;\r\n}));\r\n","class FuzzySearch {\n  constructor(list = [], keys = [], options = {}) {\n    if (list.length == 0) {\n      throw new Error('We need an array containing the search list');\n    }\n\n    this.list = list;\n    this.keys = keys;\n    this.options = FuzzySearch.extend({\n      caseSensitive: false,\n      sort: false,\n    }, options);\n  }\n\n  search(query = '') {\n    let results = [];\n\n    if (query == '') {\n      return this.list;\n    }\n\n    for (let x = 0; x < this.list.length; x++) {\n      let item = this.list[x];\n\n      if (this.keys.length == 0) {\n        let score = FuzzySearch.isMatch(item, query, this.options.caseSensitive);\n\n        if (score) {\n          results.push({\n            item,\n            score,\n          });\n        }\n      } else {\n        keysLoop: for (let y = 0; y < this.keys.length; y++) {\n          let propertyValues = FuzzySearch.getDescendantProperty(item, this.keys[y]);\n\n          for (let z = 0; z < propertyValues.length; z++) {\n            let score = FuzzySearch.isMatch(propertyValues[z], query, this.options.caseSensitive);\n\n            if (score) {\n              results.push({\n                item,\n                score,\n              });\n\n              break keysLoop;\n            }\n          }\n        }\n      }\n    }\n\n    if (this.options.sort) {\n      results.sort((a, b) => {\n        return a.score - b.score;\n      });\n    }\n\n    return results.map((result) => {\n      return result.item;\n    });\n  }\n\n  static extend(...objects) {\n    let target = {};\n\n    for (let x = 0; x < objects.length; x++) {\n      let object = objects[x];\n\n      for (let property in object) {\n        if (Object.prototype.hasOwnProperty.call(object, property)) {\n          if (Object.prototype.toString.call(object[property]) === '[object Object]') {\n            target[property] = FuzzySearch.extend(target[property], object[property]);\n          } else {\n            target[property] = object[property];\n          }\n        }\n      }\n    }\n\n    return target;\n  }\n\n  static getDescendantProperty(object, path, list = []) {\n    let firstSegment;\n    let remaining;\n    let dotIndex;\n    let value;\n    let index;\n    let length;\n\n    if (!path) {\n      list.push(object)\n    } else {\n      dotIndex = path.indexOf('.')\n\n      if (dotIndex !== -1) {\n        firstSegment = path.slice(0, dotIndex)\n        remaining = path.slice(dotIndex + 1)\n      } else {\n        firstSegment = path\n      }\n\n      value = object[firstSegment]\n      if (value !== null && value !== undefined) {\n        if (!remaining && (typeof value === 'string' || typeof value === 'number')) {\n          list.push(value)\n        } else if (Object.prototype.toString.call(value) === '[object Array]') {\n          for (index = 0, length = value.length; index < length; index++) {\n            FuzzySearch.getDescendantProperty(value[index], remaining, list)\n          }\n        } else if (remaining) {\n          FuzzySearch.getDescendantProperty(value, remaining, list)\n        }\n      }\n    }\n\n    return list\n  }\n\n  static isMatch(item, query, caseSensitive) {\n    if (!caseSensitive) {\n      item = item.toLocaleLowerCase();\n      query = query.toLocaleLowerCase();\n    }\n\n    let index = 0;\n    let indexes = [];\n    let letters = query.split('');\n\n    for (let x = 0; x < letters.length; x++) {\n      let letter = letters[x];\n\n      index = item.indexOf(letter, index);\n\n      if (index == -1) {\n        return false;\n      }\n\n      indexes.push(index);\n\n      index++;\n    }\n\n    let score = 1;\n\n    for (let x = 0; x < indexes.length; x++) {\n      if (x != indexes.length - 1) {\n        score += indexes[x + 1] - indexes[x];\n      }\n    }\n\n    return score;\n  }\n}\n"],"sourceRoot":"/source/"}